generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  calendars     Calendar[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  @@map("users")
}

model Calendar {
  id       Int      @id @default(autoincrement())
  authorId Int
  author   User     @relation(fields: [authorId], references: [id])
  title    String?  @default("New calendar") @db.VarChar(16)
  main     Boolean? @default(false)
  hidden   Boolean? @default(false)
  shared   Boolean? @default(false)
  events   Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("calendars")
}

model Event {
  id         Int       @id @default(autoincrement())
  calendarId Int
  calendar   Calendar  @relation(fields: [calendarId], references: [id])
  title      String?   @default("New event") @db.VarChar(16)
  content    String?   @db.TinyText
  category   Category? @default(Reminder)
  target     DateTime?
  duration   Int?      @db.UnsignedInt
  system     Boolean?  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("events")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  Arrangement
  Reminder
  Task
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
